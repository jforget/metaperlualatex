#!/usr/bin/perl
# -*- encoding: utf-8; indent-tabs-mode: nil -*-
#
#     mpll: program which merges the functionalities of perltex and lualatex
#
#     Copyright (C) 2012 Jean Forget
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the same terms as Perl: either the Artistic License,
#     or the GNU General Public License as published by
#     the Free Software Foundation; either version 1, or (at your option)
#     any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License and
#     the Artistic License along with this program; if not, write to the Free
#     Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#     02111-1307, USA.

use v5.10;
use strict;
use warnings;

my @args_p;
my @args_l;
my $dry_run;
my $job1;    # explicit jobname option
my $job2;    # implicit from filename.tex parameter

while (my $arg = shift @ARGV) {
  given ($arg) {

    # exclusive options
    when ('--help') {
      exec('perldoc', $0);
    }
    when ('--version') {
      print <<'EOF';
This is mpll version 0.1

No version given for perltex

EOF
      exec(qw/lualatex --version/);
    }
    when ('--credits') {
      print <<'EOF';
mpll      by Jean Forget
perltex   by Scott Pakin

Credits for lualatex:
EOF
      exec(qw/lualatex --credits/);
    }
    when (/--dry-run/) {
      $dry_run = 1;
    }

    # perltex options
    when (/--(?:nosafe|safe|makesty|permit=.+)$/) {
      push @args_p, $arg;
    }
    when (/--permit$/) {
      push @args_p, $arg, shift @ARGV;
    }

    # lualatex options and parameters
    when (/--jobname$/) {
      $job1 //= shift @ARGV;
      push @args_l, "$arg=$job1";
    }
    when (/--jobname=(.*)$/) {
      $job1 //= $1;
      push @args_l, $arg;
    }
    when (/(.*).tex$/) {
      $job2 //= $1;
      push @args_l, $arg;
    }
    default {
      push @args_l, $arg;
    }
  }
}
unless ($job1) {
  if ($job2){
    unshift @args_l, "--jobname=$job2";
  }
}

if ($dry_run) {
  say join "\n  ", 'perltex', @args_p, "--latex=lualatex", @args_l;
}
else {
  exec 'perltex', @args_p, "--latex=lualatex", @args_l;
}

__END__

=head1 NAME

mpll -- metaperlualatex typeset LaTeX documents, with embedded Perl code, Lua code and METAPOST code.

=head1 SYNOPSIS

  mpll [--help] [ perltex options ] [ lualatex options ]

=head1 DESCRIPTION

mpll is actually a thin wrapper around perltex and lualatex. It allows you embed Perl code,
Lua code and METAPOST at the same time inside a LaTeX document.


=head1 OPTIONS

The options are split into three categories: B<perltex> options, B<lualatex>
options and exclusive options. B<perltex> options and B<lualatex> options
are transparently given to their respective target programs.
Exclusive options are options that are not transparently transmitted
to B<perltex> or B<lualatex>. In some cases, exclusive options even prevent
the typesetting from being performed.

=head2 Exclusive Options

=over 4

=item B<--help>

Displays the basic usage information and exits.

=item B<--version>

Displays the version numbers for B<mpll> and B<lualatex> and exits (no version number is defined for B<perltex>).

=item B<--credits>

Display credits and exits.

=item B<--dry-run>

Parses the options, builds the B<perltex> commande line, prints it and exits, without running B<perltex> or B<lualatex>.
For debugging purposes.

=back

=head2 Perltex Options

(Taken nearly verbatim from B<perltex>'s documentation)

=over 4

=item B<-->[B<no>]B<safe>

Enable or disable sandboxing.  With the default of B<--safe>,
B<perltex> executes the code from a C<\perlnewcommand> or
C<\perlrenewcommand> macro within a protected environment that
prohibits ``unsafe'' operations such as accessing files or executing
external programs.  Specifying B<--nosafe> gives the LaTeX document
I<carte blanche> to execute any arbitrary Perl code, including that
which can harm the user's files.  See L<Safe> for more information.

=item B<--permit>=I<feature>

Permit particular Perl operations to be performed.  The B<--permit>
option, which can be specified more than once on the command line,
enables finer-grained control over the B<perltex> sandbox.  See
L<Opcode> for more information.

=item B<--makesty>

Generate a LaTeX style file called F<noperltex.sty>.  Replacing the
document's C<\usepackage{perltex}> line with C<\usepackage{noperltex}>
produces the same output but does not require PerlTeX, making the
document suitable for distribution to people who do not have PerlTeX
installed.  The disadvantage is that F<noperltex.sty> is specific to
the document that produced it.  Any changes to the document's PerlTeX
macro definitions or macro invocations necessitates rerunning
B<perltex> with the B<--makesty> option.

=back

=head2 Lualatex Options

B<lualatex> has many options and it is still in development. So the
actually available options for B<mpll> are the options offered
by the B<lualatex> program installed on your system.
However, here are the most frequently used options

TODO

=head1 EXAMPLES

In its simplest form, B<mpll> is run just like B<perltex> or B<latex>:

    mpll myfile.tex

If LaTeX gives a ``C<trapped by operation mask>'' error and you trust
the F<.tex> file you're trying to compile not to execute malicious
Perl code (e.g., because you wrote it yourself), you can disable
B<perltex>'s safety mechanisms with B<--nosafe>:

    mpll --nosafe myfile.tex

The following command gives documents only B<perltex>'s default
permissions (C<:browse>) plus the ability to open files and invoke the
C<time> command:

    mpll --permit=:browse --permit=:filesys_open
      --permit=time myfile.tex

TODO

=head1 ENVIRONMENT

B<perltex> and therefore B<mpll> honor the following environment variables:

=over 4

=item PERLTEX

Specify the filename of the LaTeX compiler.  The LaTeX compiler
defaults to ``C<latex>''.  The C<PERLTEX> environment variable
overrides this default, and the B<--latex> command-line option (see
L</OPTIONS>) overrides that.

=back

=head1 FILES

While compiling F<jobname.tex>, B<perltex> makes use of the following
files:

=over 4

=item F<jobname.lgpl>

log file written by Perl; helpful for debugging Perl macros

=item F<jobname.topl>

information sent from LuaLaTeX to Perl

=item F<jobname.frpl>

information sent from Perl to LuaLaTeX

=item F<jobname.tfpl>

``flag'' file whose existence indicates that F<jobname.topl> contains
valid data

=item F<jobname.ffpl>

``flag'' file whose existence indicates that F<jobname.frpl> contains
valid data

=item F<jobname.dfpl>

``flag'' file whose existence indicates that F<jobname.ffpl> has been
deleted

=item F<noperltex-#.tex>

file generated by F<noperltex.sty> for each PerlTeX macro invocation

=back

=head1 NOTES

B<perltex>'s sandbox defaults to what L<Opcode> calls ``C<:browse>''.

=head1 SEE ALSO

latex(1), pdflatex(1), perl(1), Safe(3pm), Opcode(3pm), luatex(1), lualatex(1), lua(1)

=head1 AUTHOR

Jean Forget

With many ideas and much documentation taken from
Scott Pakin, I<scott+pt@pakin.org>
and the LuaTeX team.
